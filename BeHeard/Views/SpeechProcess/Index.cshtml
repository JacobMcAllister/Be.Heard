<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<div id="controls">
    <div class="row align-items-center vh-100">
        <div class="col align-items-center">
            <div class="row text-center m-2 h-auto" style="background-color: darkgrey; border-radius: 8px">
                <button type="button" class="btn btn-primary" id="recordButton">
                    <div class="col-12">
                        <i class="fas fa-microphone-alt fa-4x"></i>
                    </div>
                    <div class="col-12">
                        <h3>Start Recording</h3>
                    </div>
                </button>
            </div>
            <div class="row text-center m-2 h-auto" style="background-color: darkgrey; border-radius: 8px">
                <button type="button" class="btn btn-primary" id="stopButton">
                    <div class="col-12">
                        <i class="fa-solid fa-stop fa-4x"></i>
                    </div>
                    <div class="col-12">
                        <h3>Stop Recording</h3>
                    </div>
                </button>
            </div>
            <div class="row text-center m-2 h-auto" style="background-color: darkgrey; border-radius: 8px">
                <button type="button" class="btn btn-primary" id="pauseButton">
                    <div class="col-12">
                        <i class="bi bi-stop fa-4x"></i>
                    </div>
                    <div class="col-12">
                        <h3>Pause Recording</h3>
                    </div>
                </button>
            </div>
            <div class="row text-center m-2 h-auto" style="background-color: darkgrey; border-radius: 8px">
                <h3>Recordings</h3>
                <ol id="recordingsList"></ol>
            </div>
        </div>
    </div>
</div>
<!-- inserting these scripts at the end to be able to use all the elements in the DOM -->
<script src="~/js/recorder.js" asp-append-version="true"></script>
<script>
    //webkitURL is deprecated but nevertheless 
    URL = window.URL || window.webkitURL;
    var gumStream;
    //stream from getUserMedia() 
    var rec;
    //Recorder.js object 
    var input;
    //MediaStreamAudioSourceNode we'll be recording 
    // shim for AudioContext when it's not avb. 
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext = new AudioContext;
    //new audio context to help us record 
    var recordButton = document.getElementById("recordButton");
    var stopButton = document.getElementById("stopButton");
    var pauseButton = document.getElementById("pauseButton");
    //add events to those 3 buttons 
    recordButton.addEventListener("click", startRecording);
    stopButton.addEventListener("click", stopRecording);
    pauseButton.addEventListener("click", pauseRecording);



    // We're using the standard promise based getUserMedia()
    function startRecording() {
        console.log("recordButton clicked");
        var constraints = {
            audio: true,
            video: false
        }
        /* Disable the record button until we get a success or fail from getUserMedia() */

        recordButton.disabled = true;
        stopButton.disabled = false;
        pauseButton.disabled = false
        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
            console.log("getUserMedia() success, stream created, initializing Recorder.js ...");
            /* assign to gumStream for later use */
            gumStream = stream;
            /* use the stream */
            input = audioContext.createMediaStreamSource(stream);
            /* Create the Recorder object and configure to record mono sound (1 channel) Recording 2 channels will double the file size */
            rec = new Recorder(input, {
                numChannels: 1
            })
            //start the recording process 
            rec.record()
            console.log("Recording started");
        }).catch(function (err) {
            //enable the record button if getUserMedia() fails 
            recordButton.disabled = false;
            stopButton.disabled = true;
            pauseButton.disabled = true
        });
    }
    function pauseRecording() {
        console.log("pauseButton clicked rec.recording=", rec.recording);
        if (rec.recording) {
            //pause 
            rec.stop();
            pauseButton.innerHTML = "Resume";
        } else {
            //resume 
            rec.record()
            pauseButton.innerHTML = "Pause";
        }
    }
    function stopRecording() {
        console.log("stopButton clicked");
        //disable the stop button, enable the record too allow for new recordings 
        stopButton.disabled = true;
        recordButton.disabled = false;
        pauseButton.disabled = true;
        //reset button just in case the recording is stopped while paused 
        pauseButton.innerHTML = "Pause";
        //tell the recorder to stop the recording 
        rec.stop(); //stop microphone access 
        gumStream.getAudioTracks()[0].stop();
        //create the wav blob and pass it on to createDownloadLink 
        rec.exportWAV(createDownloadLink);
    }
    function createDownloadLink(blob) {
        var url = URL.createObjectURL(blob);
        var au = document.createElement('audio');
        var li = document.createElement('li');
        var link = document.createElement('a');
        //add controls to the <audio> element 
        au.controls = true;
        au.src = url;
        //link the a element to the blob 
        link.href = url;
        link.download = new Date().toISOString() + '.wav';
        link.innerHTML = link.download;
        //add the new audio and a elements to the li element 
        li.appendChild(au);
        li.appendChild(link);
        //add the li element to the ordered list 
        recordingsList.appendChild(li);
    }

</script>